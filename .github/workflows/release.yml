# This action will generate Windows|Linux|MacOS binary releases

name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  build_release:
    name: Build release binaries
    runs-on: ${{ matrix.config.os }}
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        config:
          # Tier 1
          - { os: ubuntu-latest, target: "aarch64-unknown-linux-gnu" }
          - { os: windows-latest, target: "i686-pc-windows-gnu" }
          - { os: windows-latest, target: "i686-pc-windows-msvc" }
          - { os: ubuntu-latest, target: "i686-unknown-linux-gnu" }
          - { os: macos-latest, target: "x86_64-apple-darwin" }
          - { os: windows-latest, target: "x86_64-pc-windows-gnu" }
          - { os: windows-latest, target: "x86_64-pc-windows-msvc" }
          - { os: ubuntu-latest, target: "x86_64-unknown-linux-gnu" }
          # Tier 2
          - { os: ubuntu-latest, target: "x86_64-unknown-linux-musl" }
          - { os: ubuntu-latest, target: "i686-unknown-linux-musl" }
          - { os: ubuntu-latest, target: "armv5te-unknown-linux-gnueabi" }
          - { os: ubuntu-latest, target: "armv7-unknown-linux-gnueabihf" }
          - { os: ubuntu-latest, target: "aarch64-unknown-linux-musl" }
          - { os: ubuntu-latest, target: "aarch64-apple-darwin" }

    steps:
      - name: Install dependencies
        if: matrix.config.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install --allow-unauthenticated -y -qq \
           libasound2-dev libgl1-mesa-dev libx11-dev libxi-dev

      - name: Checkout
        uses: actions/checkout@v2

      - name: Set the release version
        shell: bash
        run: echo "RELEASE_VERSION=${GITHUB_REF:10}" >> $GITHUB_ENV

      - name: Cache Cargo dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.toml') }}

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.config.target }}
          override: true
          profile: minimal

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --locked --target ${{ matrix.config.target }}

      - name: Prepare artifacts [Windows]
        shell: bash
        if: matrix.config.os == 'windows-latest'
        run: |
          release_dir="fishfight-${{ env.RELEASE_VERSION }}"
          artifact_path="fishfight-${{ env.RELEASE_VERSION }}-${{ matrix.config.target }}.zip"
          echo "ARTIFACT_PATH=$artifact_path" >> $GITHUB_ENV
          mkdir $release_dir
          cp target/${{ matrix.config.target }}/release/fishfight.exe $release_dir/
          strip $release_dir/fishfight.exe
          cp -R assets/ $release_dir/
          7z a -tzip $artifact_path $release_dir/

      - name: Prepare artifacts [Unix]
        shell: bash
        if: matrix.config.os != 'windows-latest'
        run: |
          release_dir="fishfight-${{ env.RELEASE_VERSION }}"
          artifact_path="fishfight-${{ env.RELEASE_VERSION }}-${{ matrix.config.target }}.tar.gz"
          echo "ARTIFACT_PATH=$artifact_path" >> $GITHUB_ENV
          mkdir $release_dir
          cp target/${{ matrix.config.target }}/release/fishfight $release_dir/
          strip $release_dir/fishfight || true
          cp -R assets $release_dir
          tar -czvf $artifact_path $release_dir/

      - name: Deploy | Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ARTIFACT_PATH }}
          path: ${{ env.ARTIFACT_PATH }}
          if-no-files-found: error

  publish_release:
    name: Create and Publish GitHub Release
    needs: build_release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download Artifacts
        uses: actions/download-artifact@v2

      - name: Set the release version
        shell: bash
        run: echo "RELEASE_VERSION=${GITHUB_REF:10}" >> $GITHUB_ENV

      - name: Generate Checksums
        run: for file in fishfight-*/fishfight-*; do openssl dgst -sha256 -r "$file" | awk '{print $1}' > "${file}.sha256"; done

      - name: Publish Release
        uses: svenstaro/upload-release-action@v2
        with:
          release_name: Release ${{ env.RELEASE_VERSION }}
          file: fishfight-*/fishfight-*
          file_glob: true
          overwrite: true
          body: "FishFight ${{ env.RELEASE_VERSION }} üêü"
          tag: ${{ github.ref }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
